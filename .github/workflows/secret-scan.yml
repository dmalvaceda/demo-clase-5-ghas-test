name: Simple Secret Detection

on: [push, pull_request, workflow_dispatch]

jobs:
  secret-scan:
    runs-on: ubuntu-latest
    name: Secret Scanner
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for secrets
        run: |
          echo "=== SECRET DETECTION SCAN ==="
          echo ""
          
          echo "1. Database Credentials:"
          grep -r -n -i "password.*=" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git || echo "  No database passwords found"
          echo ""
          
          echo "2. API Keys:"
          grep -r -n -E "(api.?key|stripe|aws|paypal)" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git -i || echo "  No API keys found"
          echo ""
          
          echo "3. JWT Secrets:"
          grep -r -n -E "jwt.?secret" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git -i || echo "  No JWT secrets found"
          echo ""
          
          echo "4. Connection Strings:"
          grep -r -n -E "://.*:.*@" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git || echo "  No connection strings found"
          echo ""
          
          echo "5. Dockerfile ENV variables:"
          if [ -f "Dockerfile" ]; then
            grep -n "ENV.*=" Dockerfile || echo "  No ENV variables found"
          else
            echo "  No Dockerfile found"
          fi
          echo ""
          
          echo "=== SCAN COMPLETED ==="

  count-secrets:
    runs-on: ubuntu-latest
    name: Count Secrets
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Count total secrets
        run: |
          echo "=== SECRET COUNT SUMMARY ==="
          
          TOTAL=0
          
          # Count database passwords
          DB_COUNT=$(grep -r -i "password.*=" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git | wc -l)
          echo "Database passwords: $DB_COUNT"
          TOTAL=$((TOTAL + DB_COUNT))
          
          # Count API keys
          API_COUNT=$(grep -r -E "(api.?key|stripe|aws|paypal)" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git -i | wc -l)
          echo "API keys: $API_COUNT"
          TOTAL=$((TOTAL + API_COUNT))
          
          # Count JWT secrets
          JWT_COUNT=$(grep -r -E "jwt.?secret" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git -i | wc -l)
          echo "JWT secrets: $JWT_COUNT"
          TOTAL=$((TOTAL + JWT_COUNT))
          
          # Count connection strings
          CONN_COUNT=$(grep -r -E "://.*:.*@" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git | wc -l)
          echo "Connection strings: $CONN_COUNT"
          TOTAL=$((TOTAL + CONN_COUNT))
          
          echo "=========================="
          echo "TOTAL SECRETS FOUND: $TOTAL"
          
          if [ "$TOTAL" -gt 50 ]; then
            echo "üö® CRITICAL: Very high number of secrets!"
          elif [ "$TOTAL" -gt 20 ]; then
            echo "‚ö†Ô∏è WARNING: High number of secrets!"
          elif [ "$TOTAL" -gt 5 ]; then
            echo "‚ö†Ô∏è MEDIUM: Some secrets detected"
          else
            echo "‚úÖ LOW: Few secrets detected"
          fi
