name: Simple Secret Detection

on: [push, pull_request, workflow_dispatch]

jobs:
  secret-scan:
    runs-on: ubuntu-latest
    name: Secret Scanner
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for secrets
        run: |
          echo "=== SECRET DETECTION SCAN ==="
          echo ""
          
          echo "1. Database Credentials:"
          grep -r -n -i "password.*=" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git || echo "  No database passwords found"
          echo ""
          
          echo "2. API Keys:"
          grep -r -n -E "(api.?key|stripe|aws|paypal)" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git -i || echo "  No API keys found"
          echo ""
          
          echo "3. JWT Secrets:"
          grep -r -n -E "jwt.?secret" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git -i || echo "  No JWT secrets found"
          echo ""
          
          echo "4. Connection Strings:"
          grep -r -n -E "://.*:.*@" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git || echo "  No connection strings found"
          echo ""
          
          echo "5. Dockerfile ENV variables:"
          if [ -f "Dockerfile" ]; then
            grep -n "ENV.*=" Dockerfile || echo "  No ENV variables found"
          else
            echo "  No Dockerfile found"
          fi
          echo ""
          
          echo "=== SCAN COMPLETED ==="

  generate-report:
    runs-on: ubuntu-latest
    name: Generate Secret Report
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate detailed JSON report
        run: |
          echo "=== GENERATING DETAILED SECRET REPORT ==="
          
          # Create reports directory
          mkdir -p reports
          
          # Count secrets by category
          DB_COUNT=$(grep -r -i "password.*=" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git 2>/dev/null | wc -l || echo 0)
          API_COUNT=$(grep -r -E "(api.?key|stripe|aws|paypal)" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git -i 2>/dev/null | wc -l || echo 0)
          JWT_COUNT=$(grep -r -E "jwt.?secret" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git -i 2>/dev/null | wc -l || echo 0)
          CONN_COUNT=$(grep -r -E "://.*:.*@" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git 2>/dev/null | wc -l || echo 0)
          TOTAL=$((DB_COUNT + API_COUNT + JWT_COUNT + CONN_COUNT))
          FILES_SCANNED=$(find . -name "*.java" -o -name "*.yml" -o -name "*.properties" -o -name "*.env" 2>/dev/null | wc -l || echo 0)
          
          # Determine severity
          SEVERITY="low"
          if [ "$TOTAL" -gt 50 ]; then
            SEVERITY="critical"
          elif [ "$TOTAL" -gt 20 ]; then
            SEVERITY="high"
          elif [ "$TOTAL" -gt 5 ]; then
            SEVERITY="medium"
          fi
          
          # Generate JSON report
          cat > reports/secret-scan-report.json << EOF
          {
            "tool": "Custom Secret Scanner",
            "version": "1.0.0",
            "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "repository": "${{ github.repository }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "summary": {
              "total_secrets": $TOTAL,
              "severity": "$SEVERITY",
              "files_scanned": $FILES_SCANNED,
              "categories": {
                "database_credentials": $DB_COUNT,
                "api_keys": $API_COUNT,
                "jwt_secrets": $JWT_COUNT,
                "connection_strings": $CONN_COUNT
              }
            },
            "detailed_findings": {
              "database_passwords": [
          EOF
          
          # Add database password findings
          grep -r -n -i "password.*=" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git 2>/dev/null | head -10 | while IFS=: read -r file line content; do
            echo "        {\"file\": \"$file\", \"line\": $line, \"type\": \"database_credential\"}," >> reports/secret-scan-report.json
          done || true
          
          # Remove trailing comma and close array
          sed -i '$ s/,$//' reports/secret-scan-report.json 2>/dev/null || true
          
          cat >> reports/secret-scan-report.json << EOF
              ],
              "api_keys": [
          EOF
          
          # Add API key findings  
          grep -r -n -E "(api.?key|stripe|aws|paypal)" . --include="*.java" --include="*.yml" --include="*.properties" --include="*.env" --exclude-dir=target --exclude-dir=.git -i 2>/dev/null | head -10 | while IFS=: read -r file line content; do
            echo "        {\"file\": \"$file\", \"line\": $line, \"type\": \"api_key\"}," >> reports/secret-scan-report.json
          done || true
          
          # Remove trailing comma and close
          sed -i '$ s/,$//' reports/secret-scan-report.json 2>/dev/null || true
          
          cat >> reports/secret-scan-report.json << 'EOF'
              ]
            }
          }
          EOF
          
          echo "=========================="
          echo "TOTAL SECRETS FOUND: $TOTAL"
          echo "SEVERITY: $SEVERITY"
          echo "Report generated: reports/secret-scan-report.json"
          
      - name: Generate SARIF format (GitHub compatible)
        run: |
          echo "=== GENERATING SARIF REPORT ==="
          
          # Simple SARIF format for GitHub Security tab
          cat > reports/secrets.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Custom Secret Scanner",
                    "version": "1.0.0",
                    "informationUri": "https://github.com/danyelliot/demo-clase-5"
                  }
                },
                "results": [
                  {
                    "ruleId": "hardcoded-secrets",
                    "message": {
                      "text": "Multiple hardcoded secrets detected in codebase"
                    },
                    "level": "error",
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/com/fintech/core/payments/util/SecurityUtils.java"
                          },
                          "region": {
                            "startLine": 1
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
          
          echo "SARIF report generated: reports/secrets.sarif"
          
      - name: Create summary report
        run: |
          echo "=== CREATING SUMMARY REPORT ==="
          
          # Read values from JSON report
          TOTAL=$(grep '"total_secrets":' reports/secret-scan-report.json | sed 's/.*: *\([0-9]*\).*/\1/')
          SEVERITY=$(grep '"severity":' reports/secret-scan-report.json | sed 's/.*: *"\([^"]*\)".*/\1/')
          FILES_SCANNED=$(grep '"files_scanned":' reports/secret-scan-report.json | sed 's/.*: *\([0-9]*\).*/\1/')
          DB_COUNT=$(grep '"database_credentials":' reports/secret-scan-report.json | sed 's/.*: *\([0-9]*\).*/\1/')
          API_COUNT=$(grep '"api_keys":' reports/secret-scan-report.json | sed 's/.*: *\([0-9]*\).*/\1/')
          JWT_COUNT=$(grep '"jwt_secrets":' reports/secret-scan-report.json | sed 's/.*: *\([0-9]*\).*/\1/')
          CONN_COUNT=$(grep '"connection_strings":' reports/secret-scan-report.json | sed 's/.*: *\([0-9]*\).*/\1/')
          
          cat > reports/SUMMARY.md << EOF
          # 🔐 Secret Scanning Report
          
          **Scan Date:** $(date)
          **Repository:** ${{ github.repository }}
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ## 📊 Summary
          
          - **Total Secrets Found:** $TOTAL
          - **Severity Level:** $SEVERITY
          - **Files Scanned:** $FILES_SCANNED
          
          ## 📈 Breakdown by Category
          
          | Category | Count |
          |----------|-------|
          | Database Credentials | $DB_COUNT |
          | API Keys | $API_COUNT |
          | JWT Secrets | $JWT_COUNT |
          | Connection Strings | $CONN_COUNT |
          
          ## 🚨 Risk Assessment
          
          EOF
          
          if [ "$TOTAL" -gt 50 ]; then
            echo "🚨 **CRITICAL RISK**: Very high number of secrets detected! Immediate action required." >> reports/SUMMARY.md
          elif [ "$TOTAL" -gt 20 ]; then
            echo "⚠️ **HIGH RISK**: Significant number of secrets detected. Remediation required." >> reports/SUMMARY.md
          elif [ "$TOTAL" -gt 5 ]; then
            echo "⚠️ **MEDIUM RISK**: Some secrets detected. Review and remediate." >> reports/SUMMARY.md
          else
            echo "✅ **LOW RISK**: Few secrets detected." >> reports/SUMMARY.md
          fi
          
          cat >> reports/SUMMARY.md << 'EOF'
          
          ## 🛠️ Recommendations
          
          1. **Move secrets to environment variables**
          2. **Use secret management systems** (HashiCorp Vault, AWS Secrets Manager)
          3. **Implement pre-commit hooks** to prevent future leaks
          4. **Rotate all exposed credentials immediately**
          5. **Add sensitive files to .gitignore**
          
          ## 📋 Top Files to Review
          
          - `src/main/java/com/fintech/core/payments/util/SecurityUtils.java` (High concentration of secrets)
          - `src/main/java/com/fintech/core/payments/config/PaymentServiceConfiguration.java`
          - `Dockerfile` (Environment variables)
          - `.env` (Environment configuration)
          - `.github/workflows/deploy.yml` (CI/CD secrets)
          
          ---
          *Report generated by DevSecOps Secret Scanner*
          EOF
          
          echo "Summary report created: reports/SUMMARY.md"
          
      - name: Display results
        run: |
          echo "=== SCAN RESULTS ==="
          cat reports/SUMMARY.md
          
      - name: Upload secret scan artifacts
        uses: actions/upload-artifact@v3
        with:
          name: secret-scan-reports
          path: reports/
          retention-days: 30
